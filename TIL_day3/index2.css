/* container(박스에 적용되는 속성값), item(각각의 item에 적용할 수 있는 속성값) 존재
container(박스에 지정되는 속성값) - display, flex-direction, flex-wrap, flex-flow, justify-content, align-items, align-content
item(박스 안 아이템에 지정되는 속성값) - order, flex-grow, flex-shrink, flex, align-self
중심축과 반대축이 존재함.
왼쪽에서 오른 쪽으로 정렬되면, 수평축이 중심축 수직충은 반대축.
위에서 아래 쪽으로 정렬되면, 수직축이 중심축, 수평축이 반대축.
div.container>div.item.item${$}*10 +Tab 자동적으로 만들어짐.
100% vs 100vh
100% 컨테이너가 들어있는 부모의 높이 100%만큼 채우겠다는 뜻, 
100vh 부모 상관 없이 아이템을 보이는 vh만큼 다 쓰겠다. 
*/
.container {
  background: beige;
  height: 100vh;
  display: flex;
  /*아이템들이 자동적으로 왼쪽에서 오른쪽으로 정렬됨.*/
  /* flex-direction: row; /* 중심축과 반대축을 설정하는..? */
  /* flex-wrap: wrap; 한 줄에 가득차면 넘어가게 할건지 말건지 */
  /* flex-flow: column nowrap; */

  /* justify-content: space-between; */
  /* item의 순서는 유지하되 오른쪽으로 배치함. flex-direction을 column이라면, 밑에서 아래쪽으로 배치됨.
  column-reverse하면 item의 순서를 뒤집지만, flex-end를 하면, 아이템의 열은 유지한 채로 아이템만 밑으로 내려줌.
  justify-content는 중심축에서 아이템을 어떻게 배치할 지 결정.*/
  /* align-items: baseline; */
  /* 반대축에서 아이템들을 어떻게 배치할건지 결정함 
  align-item: base-line;으로 하면 텍스트가 모두 균등하게 보여질 수 있도록 베이스 라인에 맞추어서 표현이 됨.*/
  /* align-content: center; 반대축의 아이템들을 지정함 */
}

.item {
  width: 40px;
  height: 40px;
  border: 1px solid black;
}

.item1 {
  background: #ef9afa;
  order: 2; /* 아이템의 순서를 바꾸고 싶을 때 사용함. */
  flex-shrink: 1;
}
.item2 {
  background: #f48fb1;
  order: 1;
}
.item3 {
  background: #ce93d8;
  order: 3;
}
/* .item4 {
  background: #b39ddb;
}
.item5 {
  background: #90caf9;
}
.item6 {
  background: #a5d6a7;
}
.item7 {
  background: #e6ee9c;
}
.item8 {
  background: #fff59d;
}
.item9 {
  background: #ffcc80;
}
.item10 {
  background: #ffab91;
} */
